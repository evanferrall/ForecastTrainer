# Makefile - commands for the project (optional, as per guide)
# Example commands:
# install:
# 	 poetry install --with gpu
# train:
# 	 poetry run python -m forecast_cli.training.train --config conf/linux_4090_train.yaml
# docker-build:
# 	 docker build -f docker/4090.Dockerfile -t escape-train:gpu .
# docker-run:
# 	 docker run --gpus all -v $(pwd)/data:/data escape-train:gpu 

.PHONY: dev test train install format lint typecheck clean\n\n# Default to Python 3.11 if not set\nPYTHON_VERSION ?= 3.11\n\n# Use poetry to find the venv path\n# This assumes you are in the project root directory where pyproject.toml is located\n# Adjust if your Makefile is elsewhere or you manage venvs differently.\n# We use a simpler approach of letting poetry manage its environment directly.\n\n# Setup development environment\ndev: install\n\t@echo \"Installing pre-commit hooks...\"\n\tpoetry run pre-commit install\n\t@echo \"Development environment ready. Activate with 'poetry shell' or prefix commands with 'poetry run'.\"\n\n# Install dependencies\ninstall:\n\t@echo \"Installing dependencies using Poetry...\"\n\tpoetry install --with dev --extras \"gpu\" --extras \"conversion\" # Install dev, gpu, and conversion extras\n\t@echo \"Installation complete.\"\n\n# Run tests\ntest:\n\t@echo \"Running tests with pytest...\"\n\tpoetry run pytest\n\n# Run training\n# Usage: make train CONFIG=path/to/your/config.yaml\ntrain:\n\ifndef CONFIG\n\t@echo \"Error: CONFIG variable not set. Usage: make train CONFIG=<path_to_config.yaml>\"\n\t@exit 1\nendif\n\t@echo \"Running training script with config: $(CONFIG)...\"\n\tpoetry run forecast --config $(CONFIG)\n\n# Format code\nformat:\n\t@echo \"Formatting code with black...\"\n\tpoetry run black .\n\t@echo \"Linting and auto-fixing with ruff...\"\n\tpoetry run ruff --fix .\n\n# Lint code\nlint:\n\t@echo \"Checking formatting with black...\"\n\tpoetry run black --check .\n\t@echo \"Linting with ruff...\"\n\tpoetry run ruff .\n\n# Type check code\ntypecheck:\n\t@echo \"Type checking with mypy...\"\n\tpoetry run mypy src\n\n# Clean build artifacts\nclean:\n\t@echo \"Cleaning build artifacts...\"\n\trm -rf build dist *.egg-info .mypy_cache .pytest_cache .ruff_cache\n\tfind . -type d -name '__pycache__' -exec rm -rf {} +\n\nhelp:\n\t@echo \"Available commands:\"\n\t@echo \"  dev        - Setup the development environment and install pre-commit hooks\"\n\t@echo \"  install    - Install project dependencies using Poetry (including dev, gpu, conversion extras)\"\n\t@echo \"  test       - Run tests using pytest\"\n\t@echo \"  train      - Run the training script (e.g., make train CONFIG=conf/your_config.yaml)\"\n\t@echo \"  format     - Format code using black and ruff\"\n\t@echo \"  lint       - Lint code using black and ruff\"\n\t@echo \"  typecheck  - Type check code using mypy\"\n\t@echo \"  clean      - Remove build artifacts and __pycache__ directories\" 