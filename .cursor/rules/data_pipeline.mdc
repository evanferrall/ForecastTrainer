---
description:
globs:
alwaysApply: false
---
# 2. Data pipeline (end-to-end)

| Stage                   | Details                                                                                                                                                                                                                            |
|-------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Raw sources             | `sales.xlsx`, `post-game-survey.csv`, 3-rd-party booking API, weather, holidays, local events in YAML                                                                                                                                |
| Extraction              | [sales_loader.py](mdc:forecast_cli/data/ingestion/sales_loader.py) normalises all money to CAD cents (Int64), parses timestamps TZ-aware, writes one Parquet per table.                                                                  |
| Merge & feature build   | [feature_builder.py](mdc:forecast_cli/data/processing/feature_builder.py) uses Polars lazy frames ⇒ single optimisation graph, creates:<br>• calendar encodings (dow, wom, doy, quarter, month_start)<br>• is_school_holiday, is_local_event (one-hot or embeddings)<br>• weather lags/leads (-48 h … +24 h)<br>• cumulative capacity features (rooms booked so far that day) |
| Train / validation split| [splitters.py](mdc:forecast_cli/data/processing/splitters.py) implements RollingOriginSplit with gaps → prevents leakage between hourly & daily heads.                                                                                             |
| Serialization to tensors| two `TimeSeriesDataSet` objects built:<br>1. Daily (horizon = 90 d)<br>2. Hourly (horizon = 72 h) telling TFT that hourly feeds get daily numeric covariates via "static" columns.<br>Memory pressure handled by writing dataset parameters to YAML and re-creating on the fly in evaluation.                 |
